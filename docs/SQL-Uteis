/* Descobrir avaliações repetidas para um mesmo artigo */
SELECT * FROM Evaluation e1 inner join Evaluation e2 on e2.id != e1.id and e1.article_id = e2.article_id and e1.user_id = e2.user_id;

/* Avalições que possuem apenas um determinado critério de exclusão */
SELECT * FROM Evaluation WHERE id in (
	SELECT e.evaluation_id FROM systematicmap.evaluations_exclusions e 
	where e.exclusion_id = 14 
	and e.evaluation_id not in (
		select e2.evaluation_id FROM systematicmap.evaluations_exclusions e2 where e2.exclusion_id != 14
	)
);

DELIMITER //
DROP PROCEDURE IF EXISTS removeQuebras//
CREATE PROCEDURE removeQuebras (maxId INT)
BEGIN
	DECLARE contador INT DEFAULT 0;
    loop_teste: LOOP
		SET contador = contador + 1;
			UPDATE article SET abstrct=REPLACE(abstrct, '\n',''), title=REPLACE(title, '\n',''), author=REPLACE(author, '\n',''), keywords=REPLACE(keywords, '\n',''), comment=REPLACE(comment, '\n','') WHERE mapStudy_id = contador;
		IF contador > maxId THEN
			LEAVE loop_teste;
		END IF;
	END LOOP loop_teste;
END//
DELIMITER ;

CALL removeQuebras(510);

ALTER TABLE `systematicmap`.`article` 
CHANGE COLUMN `note` `note` LONGTEXT NULL DEFAULT NULL ;

ALTER TABLE `systematicmap`.`article` 
CHANGE COLUMN `volume` `volume` VARCHAR(255) NULL DEFAULT NULL ;

UPDATE article SET classification = 'WITHOUT_AUTHORS' WHERE (author like '' OR author is null) AND classification is null;
UPDATE article SET classification = 'WITHOUT_ABSTRACT' WHERE (abstrct like '' OR abstrct is null) AND classification is null;
SELECT id, author, abstrct, classification FROM article WHERE (author like '' OR abstrct like '') AND classification is null;
UPDATE article SET abstrct=TRIM(abstrct), title=TRIM(title), author=TRIM(author), keywords=TRIM(keywords), comment=TRIM(comment);

-- Limpando banco com artigos removidos

DELETE FROM evaluations_inclusions WHERE evaluation_id in (SELECT id FROM evaluation WHERE article_id in (SELECT id FROM article WHERE removed = true));
DELETE FROM evaluations_exclusions WHERE evaluation_id in (SELECT id FROM evaluation WHERE article_id in (SELECT id FROM article WHERE removed = true));
DELETE FROM evaluation WHERE article_id in (SELECT id FROM article WHERE removed = true);

UPDATE article SET same_article_id = null WHERE removed = true;
DELETE FROM article WHERE removed = true;

-- Limpando banco com mapeamentos removidos

DELETE FROM users_mapStudys WHERE mapStudy_id in (SELECT id FROM mapstudy WHERE removed = 1);

DELETE FROM evaluations_inclusions WHERE evaluation_id in (SELECT id FROM evaluation WHERE article_id in 
	(SELECT id FROM article WHERE mapStudy_id in (SELECT id FROM mapstudy WHERE removed = 1)));
DELETE FROM evaluations_exclusions WHERE evaluation_id in (SELECT id FROM evaluation WHERE article_id in 
	(SELECT id FROM article WHERE  mapStudy_id in (SELECT id FROM mapstudy WHERE removed = 1)));

DELETE FROM evaluation WHERE article_id in (SELECT id FROM article WHERE  mapStudy_id in (SELECT id FROM mapstudy WHERE removed = 1));

UPDATE article SET same_article_id = null WHERE mapStudy_id in (SELECT id FROM mapstudy WHERE removed = 1);

-- DELETE FROM refinementparameters WHERE  id in (SELECT refinement_id FROM mapstudy WHERE removed = 1);

-- Remover extrações

DELETE FROM evaluation_extraction WHERE article_id in (SELECT id FROM article WHERE  mapStudy_id in (SELECT id FROM mapstudy WHERE removed = 1));
DELETE FROM evaluation_extraction_final WHERE article_id in (SELECT id FROM article WHERE  mapStudy_id in (SELECT id FROM mapstudy WHERE removed = 1));

-- remover form
DELETE FROM Form_Question WHERE Form_id in (SELECT form_id FROM mapstudy WHERE removed = 1)
SELECT * FROM Form_Question WHERE Form_id not in (SELECT form_id FROM mapstudy WHERE removed = 0 AND form_id is not null);

UPDATE mapstudy SET form_id = null WHERE removed = 1;

DELETE FROM Form WHERE  id not in (SELECT form_id FROM mapstudy WHERE removed = 0 AND form_id is not null);

-- remover alternativas
DELETE FROM Alternative WHERE question_id in (SELECT questions_id FROM Form_Question WHERE Form_id in (SELECT form_id FROM mapstudy WHERE removed = 1));

-- remover questões
DELETE FROM Question WHERE id in (SELECT questions_id FROM Form_Question WHERE Form_id in (SELECT form_id FROM mapstudy WHERE removed = 1));


DELETE FROM article WHERE  mapStudy_id in (SELECT id FROM mapstudy WHERE removed = 1);


DELETE FROM mapstudy WHERE removed = true;

-- Inserção manual de supervisor em um mapeamento

INSERT INTO users_mapStudys (removed, role, mapStudy_id, user_id) 
	VALUES (0, 'SUPERVISOR', mapStudy_id, user_id);